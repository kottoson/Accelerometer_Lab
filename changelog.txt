20160408 22:11
================
	*	The max and min values seemed incorrect... It seems the max and min values are being stored in registers. Hopefully this will change as those values are used more.
	*	Created two new global "Longs" in timerA to represent theta and phi
	*	Created an UpdateLEDs() method that changes high, mid, and low based on theta.
	*	Test worked with theta=180 (i.e. no difference from before)
	*	Test worked with theta=-180 degrees (south)
	*	UpdateLEDs() works with full range of theta.
	*	fixed a bug where the largest reading of x was going into xmin
	*	repeated above for y and z
	*	fixed a bug where the sum of the mins and maxes were being multiplied by two, instead of divided by two
	*	added to "UpdateLEDs()" the CORDIC section to get theta. It makes a calculations pointer, puts the current x and y averages in it, runs CORDIC, and stores the angle in theta
	*	forgot I needed to subract origin[i] from the averages :P Fixed
	*	put origin in ADC b/c it doesnt do much good in main.c
	*	It appeared that theta was either too big or too small. Now trying a greater divisor with the angle...
	*	Realized I need to do more calculations anyways to get theta... Will compare cordic values w/ true values tomorrow and get it sorted out.
	
20160409 14:10
=================
	*	Looked at the ranges for our x, y, and z values
	*	xmax:479, xmin:440, ymax:555, ymin:506, zmax:883, zmin:836
	*	forced CORDIC to return a 45 degree angle. It turns out the output needs to be shifted right 14 places in order to be the correct value.
	*	Got it working w/ NE and N, but ran into an error when trying to give it NE. Will need to debug later..
	*	Debugging note: the angle input seems to affect the angle output when calculating arctan. Be sure to set it to 0 before running CORDIC.
	
20160409 19:30
=================
	*	Debugging note 2: CORDIC was incorrect when x was negative and y was positive, but correct when x was positive and y was negative.
	*	From this it can be assumed that x must be a positive value.
	*	I am not getting logically-correct values from CORDIC when feeding it x=1, y=0. Trying a different version of CORDIC...
	*	Switched over to CORDIC v.1 and it's much easier to work with. Things to be aware of:
			-"x" and "y" for cordic are the opposite of the accelerometer output's x and y
			-as it is, the level seems to have some systematic error, and the threshold for "level" has to be somewhere between 4 and 8 degrees.
	*	Tried using the reference voltage instead of Vcc for the max voltage of the ADC (ADC.c line 13)
	*	Can't do that... it appears that the output voltage on the Z channel exceeds 2.5V. Reverting to how it was before.
	*	It appears that the range of values for X is 2.5 times greater than for Y and Z, so I will try adjusting for this.
	*	Initial results are promising, so I am changing the "level" sensitivity of "level-ness" down from 8
	*	Results are great! The level should be accurate to within 2 degrees.
	*	Trying to adjust highThreshold based on phi. I do this by taking phi and shifting it right 9 bits to get a number between 0 and ~17
	*	PWM for high threshold is a success! pushing to github and trying something similar with midThreshold (highThreshold/2) and lowThreshold (highThreshold / 4)
	*		